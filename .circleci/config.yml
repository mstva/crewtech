# This configuration has been automatically generated by the CircleCI Config SDK.
# For more information, see https://github.com/CircleCI-Public/circleci-config-sdk-ts
# SDK Version: 0.0.0-development

version: 2.1
setup: false
jobs:
  run_unit_tests:
    docker:
      - image: cimg/python:3.10
      - image: cimg/postgres:13.8
        environment:
          DATABASE_NAME: $POSTGRES_DB
          DATABASE_USER: $POSTGRES_USER
          DATABASE_PASSWORD: $POSTGRES_PASSWORD
          DATABASE_HOST: $POSTGRES_HOST
          DATABASE_PORT: $POSTGRES_PORT
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install Packages
          working_directory: backend
          command: |-
            python3 -m venv venv;
            . venv/bin/activate;
            python -m pip install --upgrade pip;
            pip install poetry;
            poetry config virtualenvs.create false --local;
            poetry install;
      - run:
          name: Run Pytest
          working_directory: backend
          command: venv/bin/pytest
  build_and_push_docker_image_to_aws_ecr:
    machine:
      image: ubuntu-2204:2022.10.1
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Setup AWS ECR
          command: sh scripts/install_aws_cli.sh -C $AWS_ACCESS_KEY -S $AWS_SECRET_KEY -R $AWS_REGION -A $AWS_ACCOUNT_ID
      - run:
          name: Build a Docker Image
          command: docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:latest -f backend/Dockerfile backend --build-arg ENVIRONMENT=production
      - run:
          name: Push to AWS ECR
          command: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:latest
  deploy_docker_image_to_aws_ec2_instance:
    machine:
      image: ubuntu-2204:2022.10.1
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Get the environment variables from CircleCI
          command: python3 scripts/get_circleci_env.py --env=production --token=$CIRCLE_TOKEN --owner=$CIRCLE_OWNER_ID
      - run:
          name: Append server env vars to env file
          command: |-
            echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> .env.production;
            echo "AWS_REGION=$AWS_REGION" >> .env.production;
            echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> .env.production;
      - run:
          name: Copy the env file and the run script to the server
          command: rsync .env.production scripts/run_backend.py $EC2_INSTANCE:/home/ubuntu
      - run:
          name: Run the script
          command: ssh $EC2_INSTANCE 'source .env.production && python3 run_backend.py --env=.env.production --image=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$DOCKER_IMAGE:latest'
workflows:
  deploy_to_aws_ec2_instance_workflow:
    jobs:
      - run_unit_tests:
          context:
            - crewtech-common-context
          filters:
            branches:
              only:
                - main
      - build_and_push_docker_image_to_aws_ecr:
          context:
            - crewtech-common-context
          filters:
            branches:
              only:
                - main
          requires:
            - run_unit_tests
          type: approval
      - deploy_docker_image_to_aws_ec2_instance:
          context:
            - crewtech-common-context
            - crewtech-production-context
          filters:
            branches:
              only:
                - main
          requires:
            - run_unit_tests
            - build_and_push_docker_image_to_aws_ecr
          type: approval
